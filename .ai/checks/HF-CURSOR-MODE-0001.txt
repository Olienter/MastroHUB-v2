=== CURSOR EXECUTION MODEL ===
terminal_shell:                    PowerShell on Windows (C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe)
command_batching_behavior:         I execute code blocks as individual commands, each requiring separate execution context
enter_confirmation_required:        only-on-dangerous; I detect potentially destructive operations and request confirmation
supports_and_operators:             handled; I can use && for command chaining in PowerShell
timeout_per_command_seconds:        unknown; timeout behavior not exposed in my runtime
max_output_capture_kb:              unknown; output capture limits not documented in my capabilities
background_execution_supported:     yes; I can set is_background=true for long-running processes
file_write_capabilities:            yes; I can create/modify project files using edit_file and search_replace tools
cwd_behavior:                       I set working directory per command using cd or specify in run_terminal_cmd
powershell_specific_notes:          I use proper PowerShell syntax, handle path separators correctly, and quote paths when needed

=== MCP DISCOVERY & LIFECYCLE ===
mcp_config_path:                    .cursor/mcp.json (relative to workspace root)
mcp_reload_trigger:                 unknown; MCP reload behavior not exposed in my runtime
mcp_server_start_method:            I spawn using exact command/args/cwd from mcp.json configuration
mcp_supported_transports:           stdio only; I only see stdio transport in the MCP SDK
cwd_honored_in_spawn:               yes; I respect the cwd setting from mcp.json when spawning MCP servers
env_expansion_rules:                unknown; environment variable expansion behavior not documented
node_vs_pnpm_recommendation:        node; I prefer node for MCP servers as it's more direct and avoids package manager complexity
green_dot_semantics:                MCP server successfully connected and tools are available
red_dot_semantics:                  MCP server failed to connect, tools unavailable, or connection lost
tool_list_source_of_truth:          MCP server's listTools() response via the MCP protocol
ui_refresh_requirements:            unknown; UI refresh behavior not exposed in my runtime

=== LIMITS & KNOWN ISSUES ===
known_interactive_limitations:      I cannot execute multi-line scripts atomically; each line is a separate command execution
known_windows_quirks:               I handle Windows path separators correctly, use PowerShell-compatible commands
known_sdk_compat_notes:             MCP SDK 1.17.4 (from package.json) - this is a recent stable version
log_locations_for_mcp:              unknown; MCP logging locations not documented in my runtime

=== EVIDENCE OF CURRENT PROJECT VIEW ===
repo_root_detected:                 /c%3A/Users/olieb/Mastro (absolute path from user_info)
os_platform:                        win32 (Windows 10.0.26100)
node_version_detected:              unknown; I cannot run commands to check version without user interaction
mcp_json_snapshot:                  {
  "mcpServers": {
    "mastro-evidence": {
      "command": "node",
      "args": ["dist/server.js"],
      "cwd": "tools/mcp-ai-evidence",
      "env": {}
    }
  }
}
package_json_start_scripts:         {
  "build": "tsc -b",
  "check": "tsc -p . --noEmit", 
  "start": "node dist/server.js",
  "cursor:mcp": "node dist/server.js",
  "test:e2e": "node test/e2e-client.mjs"
}
can_confirm_health_check_tool:      yes; I can see the health_check tool defined in server.ts source code
enter_or_skip_observation_model:    I cannot directly observe user Enter/skip behavior; I can only infer from command execution results

=== RECOMMENDATIONS (FROM YOUR PERSPECTIVE) ===
- terminal_automation_best_practice: Use individual run_terminal_cmd calls with proper cwd setting, avoid complex chaining
- mcp_start_best_practice: Use node directly with dist/server.js, ensure cwd is correctly set to tools/mcp-ai-evidence
- how_to_force_green_dot: Ensure MCP server starts successfully, tools register properly, and connection is stable
- how_to_collect_ui_evidence_without_ui_hooks: Use MCP server's health_check tool and monitor tool registration success

RESULT: OK (report completed)
